import { HttpClient } from '@angular/common/http';
import { Component, ElementRef, OnInit, Renderer2, signal, ViewChild } from '@angular/core';
import { AngularSvgIconModule } from 'angular-svg-icon';
import { toast } from 'ngx-sonner';
import { User } from 'src/app/modules/management/model/user.model';

@Component({
  selector: 'app-options-value',
  templateUrl: './options-value.component.html',
  styleUrl: './options-value.component.scss',
})
export class OptionsValueComponent implements OnInit {
  @ViewChild('cellInput', { static: false }) cellInput: ElementRef | undefined;

  rows: number = 11; // Number of rows in the matrix
  cols: number = 7; // Number of columns in the matrix
  matrix: {
    value: number;
    type: number;
    isEditing: boolean;
    isSelected: boolean;
    name: string;
    icon: string;
    status: string;
    errorName: string;
    hasError: boolean;
  }[][] = []; // Ma tr·∫≠n l∆∞u gi√° tr·ªã, ki·ªÉu, tr·∫°ng th√°i ch·ªânh s·ª≠a, tr·∫°ng th√°i ch·ªçn, t√™n
  currentType: number = 1; // Ki·ªÉu hi·ªán t·∫°i ƒëang ch·ªçn
  usedNames: Set<number> = new Set(); // Danh s√°ch l∆∞u tr·ªØ c√°c gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
  selectedMatrix: {
    value: number;
    type: number;
    name: string;
    icon: string;
    status: string;
  }[][] = []; // Ma tr·∫≠n th·ª© hai l∆∞u gi√° tr·ªã, ki·ªÉu, tr·∫°ng th√°i ch·ªânh s·ª≠a, tr·∫°ng th√°i ch·ªçn, t√™n v√† tr·∫°ng th√°i c·ªßa c√°c √¥ ƒë∆∞·ª£c ch·ªçn
  originalName: string = '';
  holdTimeout: any;
  types = [
    { value: 1, label: 'Gh·∫ø', allowAutoNameEdit: true, icon: 'seat-available.svg', blockIcon: 'seat-block.svg' },
    { value: 2, label: 'H√†nh lang', allowAutoNameEdit: false, icon: 'street.svg' },
    { value: 3, label: 'T√†i x·∫ø', allowAutoNameEdit: false, icon: 'driver.svg' },
  ];

  constructor(private el: ElementRef, private renderer: Renderer2) {
    this.initializeMatrix(); // T·∫°o ma tr·∫≠n 5x5

    ///temp second matrix
    this.selectedMatrix = Array.from({ length: this.rows }, (_, i) =>
      Array.from({ length: this.cols }, (_, j) => ({
        value: i * this.cols + j + 1,
        type: 0,
        name: '',
        icon: '',
        status: '',
      })),
    );
  }

  // Kh·ªüi t·∫°o ma tr·∫≠n v√† tr·∫°ng th√°i ch·ªçn
  initializeMatrix(): void {
    this.matrix = Array.from({ length: this.rows }, (_, i) =>
      Array.from({ length: this.cols }, (_, j) => ({
        value: i * this.cols + j + 1,
        type: 0,
        isEditing: false,
        isSelected: false,
        name: '',
        icon: '',
        errorName: '',
        status: 'available',
        hasError: false, // Th√™m thu·ªôc t√≠nh hasError
      })),
    );
  }

  // Ch·ªçn ki·ªÉu (type)
  selectType(type: number): void {
    this.currentType = type;
  }

  // √Åp d·ª•ng ki·ªÉu v√†o √¥ ƒë∆∞·ª£c ch·ªçn, kh√¥ng cho ph√©p b·ªè ch·ªçn khi ƒëang ch·ªânh s·ª≠a
  applyType(row: number, col: number): void {
    const cell = this.matrix[row][col];
    const selectedType = this.types.find((type) => type.value === this.currentType);
    // Th√™m ƒëi·ªÅu ki·ªán ki·ªÉm tra n·∫øu type c·ªßa cell ƒë√£ ch·ªçn gi·ªëng v·ªõi currentType th√¨ kh√¥ng cho ch·ªçn n·ªØa
    if (cell.type === this.currentType) {
      return;
    }

    if (cell.isEditing) {
      return;
    }

    // Ki·ªÉm tra v√† l∆∞u tr·∫°ng th√°i ch·ªânh s·ª≠a hi·ªán t·∫°i
    this.matrix.forEach((matrixRow, i) => {
      matrixRow.forEach((cell, j) => {
        if (cell.isEditing) {
          this.saveEdit(i, j);
        }
      });
    });

    if (this.hasError()) {
      return; // Kh√¥ng cho ph√©p chuy·ªÉn n·∫øu c√≥ l·ªói
    }

    // N·∫øu √¥ ƒëang l√† type 1 v√† ƒë∆∞·ª£c thay ƒë·ªïi th√†nh type 2 ho·∫∑c 3, c·∫≠p nh·∫≠t l·∫°i usedNames
    if (cell.type === 1 && (this.currentType === 2 || this.currentType === 3)) {
      this.usedNames.delete(parseInt(cell.name.slice(1)));
    }

    this.matrix.forEach((matrixRow, i) => {
      matrixRow.forEach((cell, j) => {
        if (cell.isEditing) {
          this.saveEdit(i, j);
        }
      });
    });

    if (this.currentType > 0) {
      cell.type = this.currentType;
      cell.isSelected = true;

      // X√≥a t√™n n·∫øu type l√† 2 ho·∫∑c 3
      if (this.currentType === 2 || this.currentType === 3) {
        cell.name = '';
      } else if (selectedType?.allowAutoNameEdit) {
        const maxNames = this.rows * this.cols;
        for (let i = 1; i <= maxNames; i++) {
          if (!this.usedNames.has(i)) {
            cell.name = `A${i.toString().padStart(2, '0')}`;
            this.usedNames.add(i);
            break;
          }
        }
      }

      // C·∫≠p nh·∫≠t icon b·∫±ng h√†m getIconByType
      cell.icon = this.getIconByType(cell.type, cell.status);
    }
  }

  // H√†m focus v√†o √¥ ƒëang ch·ªânh s·ª≠a
  focusCell(): void {
    console.log('üöÄ ~ OptionsValueComponent ~ focusCell ~ focusCell:');
    setTimeout(() => {
      if (this.cellInput) {
        this.cellInput.nativeElement.focus();
      }
    }, 0);
  }

  // B·∫Øt ƒë·∫ßu nh·∫•n chu·ªôt
  onMouseDown(row: number, col: number, event: MouseEvent): void {
    if (event.button !== 0) return; // Ch·ªâ th·ª±c hi·ªán n·∫øu nh·∫•n chu·ªôt tr√°i
    event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh
    this.holdTimeout = setTimeout(() => {
      this.toggleStatus(row, col, event); // Thay ƒë·ªïi tr·∫°ng th√°i khi nh·∫•n gi·ªØ
      this.holdTimeout = null; // ƒê·∫∑t l·∫°i holdTimeout
    }, 1000); // Th·ªùi gian nh·∫•n gi·ªØ l√† 1000ms
  }

  // Nh·∫£ chu·ªôt
  onMouseUp(row: number, col: number, event: MouseEvent): void {
    if (event.button !== 0) return; // Ch·ªâ th·ª±c hi·ªán n·∫øu nh·∫£ chu·ªôt tr√°i
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout); // H·ªßy b·ªô ƒë·∫øm th·ªùi gian n·∫øu nh·∫•n gi·ªØ ch∆∞a x·∫£y ra
      this.applyType(row, col); // Th·ª±c hi·ªán h√†nh ƒë·ªông nh·∫•n
    }
    this.holdTimeout = null; // ƒê·∫∑t l·∫°i holdTimeout
  }

  // Di chu·ªôt ra kh·ªèi √¥
  onMouseLeave(event: MouseEvent): void {
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout); // H·ªßy b·ªô ƒë·∫øm th·ªùi gian n·∫øu nh·∫•n gi·ªØ ch∆∞a x·∫£y ra
      this.holdTimeout = null; // ƒê·∫∑t l·∫°i holdTimeout
    }
  }

  // Nh·∫•n chu·ªôt
  onClick(row: number, col: number, event: MouseEvent): void {
    if (event.button !== 0) return; // Ch·ªâ th·ª±c hi·ªán n·∫øu nh·∫•n chu·ªôt tr√°i
    if (this.holdTimeout) {
      clearTimeout(this.holdTimeout); // H·ªßy b·ªô ƒë·∫øm th·ªùi gian n·∫øu nh·∫•n gi·ªØ ch∆∞a x·∫£y ra
      this.holdTimeout = null; // ƒê·∫∑t l·∫°i holdTimeout
      this.applyType(row, col); // Th·ª±c hi·ªán h√†nh ƒë·ªông nh·∫•n
    }
  }

  getIconByType(type: number, status: string = 'available'): string {
    const selectedType = this.types.find((t) => t.value === type);
    if (type === 1 && status === 'block' && selectedType?.blockIcon) {
      return `assets/icons/${selectedType.blockIcon}`; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn icon ƒë·∫∑c bi·ªát
    }
    return selectedType?.icon ? `assets/icons/${selectedType.icon}` : '';
  }

  // Ki·ªÉm tra xem √¥ c√≥ ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
  isEditing(row: number, col: number): boolean {
    return this.matrix[row][col].isEditing;
  }

  // B·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a √¥ khi nh·∫•n chu·ªôt ph·∫£i
  startEdit(row: number, col: number, event: MouseEvent): void {
    event.preventDefault(); // NgƒÉn ch·∫∑n menu chu·ªôt ph·∫£i m·∫∑c ƒë·ªãnh
    const cell = this.matrix[row][col];
    if (cell.type > 0 && cell.type !== 2 && cell.type !== 3) {
      this.originalName = cell.name; // L∆∞u gi√° tr·ªã name hi·ªán t·∫°i
      cell.isEditing = true; // B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
      this.focusCell();
    }
  }

  saveEdit(row: number, col: number): void {
    const cell = this.matrix[row][col];
    const newName = cell.name;

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng t√™n (ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 'A' v√† theo sau l√† s·ªë t·ª´ 01 ƒë·∫øn 99)
    const nameFormat = /^A\d{2}$/;
    if (!nameFormat.test(newName)) {
      toast.error('T√™n kh√¥ng h·ª£p l·ªá. T√™n ph·∫£i c√≥ ƒë·ªãnh d·∫°ng A01, A02, ..., A99.');
      cell.hasError = true; // ƒê√°nh d·∫•u √¥ c√≥ l·ªói
      cell.isEditing = true; // Gi·ªØ √¥ ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
      this.focusCell(); // Focus v√†o √¥ l·ªói
      return;
    }

    // Ki·ªÉm tra n·∫øu t√™n m·ªõi ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng v√† kh√°c v·ªõi t√™n hi·ªán t·∫°i
    if (newName !== this.originalName && this.usedNames.has(parseInt(newName.slice(1)))) {
      toast.error('T√™n n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn t√™n kh√°c.');
      cell.hasError = true; // ƒê√°nh d·∫•u √¥ c√≥ l·ªói
      cell.isEditing = true; // Gi·ªØ √¥ ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
      this.focusCell(); // Focus v√†o √¥ l·ªói
      return;
    }

    // X√≥a t√™n c≈© kh·ªèi danh s√°ch ƒë√£ s·ª≠ d·ª•ng
    this.usedNames.delete(parseInt(this.originalName.slice(1)));

    // Th√™m t√™n m·ªõi v√†o danh s√°ch ƒë√£ s·ª≠ d·ª•ng
    this.usedNames.add(parseInt(newName.slice(1)));

    cell.hasError = false; // X√≥a ƒë√°nh d·∫•u l·ªói
    cell.isEditing = false; // K·∫øt th√∫c ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
  }

  // Ph∆∞∆°ng th·ª©c l∆∞u gi√° tr·ªã selected
  saveSelected(): void {
    // √Ånh x·∫° d·ªØ li·ªáu t·ª´ c√°c √¥ ƒë∆∞·ª£c ch·ªçn trong ma tr·∫≠n 1 sang ma tr·∫≠n 2
    const selectedCells = this.matrix.flat().filter((cell) => cell.isSelected);
    // √Ånh x·∫° d·ªØ li·ªáu t·ª´ selectedCells sang selectedMatrix
    selectedCells.forEach((cell) => {
      const row = Math.floor((cell.value - 1) / this.cols);
      const col = (cell.value - 1) % this.cols;
      this.selectedMatrix[row][col] = {
        value: cell.value,
        type: cell.type,
        name: cell.name,
        status: cell.status,
        icon: this.getIconByType(cell.type, cell.status),
      };
    });

    console.log('Selected Cells:', this.selectedMatrix);
    toast.success('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
  }

  // Ph∆∞∆°ng th·ª©c thay ƒë·ªïi tr·∫°ng th√°i c·ªßa √¥ trong ma tr·∫≠n th·ª© hai
  toggleStatus(row: number, col: number, event: MouseEvent): void {
    event.preventDefault(); // NgƒÉn ch·∫∑n menu chu·ªôt ph·∫£i m·∫∑c ƒë·ªãnh
    const cell = this.matrix[row][col];
    if (cell.type === 2 || cell.type === 3) {
      return; // Kh√¥ng cho ph√©p click n·∫øu type l√† 2 ho·∫∑c 3
    }
    if (cell.status === 'available') {
      cell.status = 'block';
    } else if (cell.status === 'block') {
      cell.status = 'available';
    }
  }

  hasError(): boolean {
    return this.matrix.some((row) => row.some((cell) => cell.hasError));
  }

  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra xem type c√≥ cho ph√©p ch·ªânh s·ª≠a t√™n hay kh√¥ng
  isNameEditable(type: number): boolean {
    const selectedType = this.types.find((t) => t.value === type);
    return selectedType ? selectedType.allowAutoNameEdit : false;
  }

  ngOnInit() {}
}
